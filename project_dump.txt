-e \n--- FILE: ./run.py ---\n
from app import create_app

app = create_app()

if __name__ == "__main__":
    app.run(debug=True)
-e \n--- FILE: ./app/service_ticket/__init__.py ---\n
from flask import Blueprint

service_ticket_bp = Blueprint("service_ticket", __name__)

from . import routes
-e \n--- FILE: ./app/service_ticket/schemas.py ---\n
from app.extensions import ma
from app.models import ServiceTicket

class ServiceTicketSchema(ma.SQLAlchemyAutoSchema):
    class Meta:
        model = ServiceTicket
        load_instance = True
        include_fk = True   
        include_relationships = False  

ticket_schema = ServiceTicketSchema()
tickets_schema = ServiceTicketSchema(many=True)
-e \n--- FILE: ./app/service_ticket/routes.py ---\n
from flask import request, jsonify
from app.extensions import db
from app.models import ServiceTicket, Mechanic
from . import service_ticket_bp
from .schemas import ticket_schema, tickets_schema

# CREATE
@service_ticket_bp.route("/", methods=["POST"])
def create_ticket():
    data = request.json
    new_ticket = ticket_schema.load(data, session=db.session)
    db.session.add(new_ticket)
    db.session.commit()
    return ticket_schema.jsonify(new_ticket), 201

# READ ALL
@service_ticket_bp.route("/", methods=["GET"])
def get_tickets():
    tickets = db.session.query(ServiceTicket).all()
    return tickets_schema.jsonify(tickets), 200

# ASSIGN MECHANIC
@service_ticket_bp.route("/<int:ticket_id>/assign-mechanic/<int:mechanic_id>", methods=["PUT"])
def assign_mechanic(ticket_id, mechanic_id):
    ticket = db.session.get(ServiceTicket, ticket_id)
    mech = db.session.get(Mechanic, mechanic_id)

    if not ticket or not mech:
        return jsonify({"error": "Ticket or Mechanic not found"}), 404

    ticket.mechanics.append(mech)
    db.session.commit()
    return ticket_schema.jsonify(ticket), 200

# REMOVE MECHANIC
@service_ticket_bp.route("/<int:ticket_id>/remove-mechanic/<int:mechanic_id>", methods=["PUT"])
def remove_mechanic(ticket_id, mechanic_id):
    ticket = db.session.get(ServiceTicket, ticket_id)
    mech = db.session.get(Mechanic, mechanic_id)

    if not ticket or not mech:
        return jsonify({"error": "Ticket or Mechanic not found"}), 404

    if mech in ticket.mechanics:
        ticket.mechanics.remove(mech)
        db.session.commit()

    return ticket_schema.jsonify(ticket), 200

# DELETE
@service_ticket_bp.route("/<int:id>", methods=["DELETE"])
def delete_ticket(id):
    ticket = db.session.get(ServiceTicket, id)
    if not ticket:
        return jsonify({"error": "Service Ticket not found"}), 404

    db.session.delete(ticket)
    db.session.commit()
    return jsonify({"message": f"Service Ticket {id} deleted"}), 200
-e \n--- FILE: ./app/models.py ---\n
from typing import List
from sqlalchemy.orm import Mapped, mapped_column, relationship, DeclarativeBase
from .extensions import db

class Base(DeclarativeBase):
    pass

# --- MODELS ---

class Customer(Base):
    __tablename__ = "customers"
    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str] = mapped_column(db.String(255), nullable=False)
    email: Mapped[str] = mapped_column(db.String(255), unique=True, nullable=False)
    phone: Mapped[str] = mapped_column(db.String(20), nullable=False)

    tickets: Mapped[List["ServiceTicket"]] = relationship(back_populates="customer")

class ServiceTicket(Base):
    __tablename__ = "service_tickets"
    id: Mapped[int] = mapped_column(primary_key=True)
    VIN: Mapped[str] = mapped_column(db.String(100), nullable=False)
    service_date: Mapped[str] = mapped_column(db.String(100), nullable=False)
    service_desc: Mapped[str] = mapped_column(db.String(255))
    customer_id: Mapped[int] = mapped_column(db.ForeignKey("customers.id"))

    customer: Mapped["Customer"] = relationship(back_populates="tickets")
    mechanics: Mapped[List["Mechanic"]] = relationship(
        secondary="service_mechanics", back_populates="tickets"
    )

class Mechanic(Base):
    __tablename__ = "mechanics"
    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str] = mapped_column(db.String(255), nullable=False)
    email: Mapped[str] = mapped_column(db.String(255), unique=True, nullable=False)
    phone: Mapped[str] = mapped_column(db.String(20), nullable=False)
    salary: Mapped[float] = mapped_column(db.Float, nullable=False)

    tickets: Mapped[List["ServiceTicket"]] = relationship(
        secondary="service_mechanics", back_populates="mechanics"
    )

# Association table
service_mechanics = db.Table(
    "service_mechanics",
    Base.metadata,
    db.Column("ticket_id", db.ForeignKey("service_tickets.id")),
    db.Column("mechanic_id", db.ForeignKey("mechanics.id"))
)
-e \n--- FILE: ./app/mechanic/__init__.py ---\n
from flask import Blueprint

# Blueprint oluştur
mechanic_bp = Blueprint("mechanic", __name__)

# routes import et (en sonda olmalı yoksa circular import olur)
from . import routes
-e \n--- FILE: ./app/mechanic/schemas.py ---\n
from app.extensions import ma
from app.models import Mechanic

class MechanicSchema(ma.SQLAlchemyAutoSchema):
    class Meta:
        model = Mechanic
        load_instance = True

# Tekil ve çoğul serializer
mechanic_schema = MechanicSchema()
mechanics_schema = MechanicSchema(many=True)
-e \n--- FILE: ./app/mechanic/routes.py ---\n
from flask import request, jsonify
from app.extensions import db
from app.models import Mechanic
from . import mechanic_bp
from .schemas import mechanic_schema, mechanics_schema

# CREATE
@mechanic_bp.route("/", methods=["POST"])
def create_mechanic():
    data = request.json
    new_mech = mechanic_schema.load(data, session=db.session)
    db.session.add(new_mech)
    db.session.commit()
    return mechanic_schema.jsonify(new_mech), 201

# READ ALL
@mechanic_bp.route("/", methods=["GET"])
def get_mechanics():
    mechanics = db.session.query(Mechanic).all()
    return mechanics_schema.jsonify(mechanics), 200

# UPDATE
@mechanic_bp.route("/<int:id>", methods=["PUT"])
def update_mechanic(id):
    mechanic = db.session.get(Mechanic, id)
    if not mechanic:
        return jsonify({"error": "Mechanic not found"}), 404

    data = request.json
    for key, value in data.items():
        setattr(mechanic, key, value)

    db.session.commit()
    return mechanic_schema.jsonify(mechanic), 200

# DELETE
@mechanic_bp.route("/<int:id>", methods=["DELETE"])
def delete_mechanic(id):
    mechanic = db.session.get(Mechanic, id)
    if not mechanic:
        return jsonify({"error": "Mechanic not found"}), 404

    db.session.delete(mechanic)
    db.session.commit()
    return jsonify({"message": f"Mechanic {id} deleted"}), 200
-e \n--- FILE: ./app/__init__.py ---\n
from flask import Flask
from .extensions import db, ma
from .models import Base
from .mechanic import mechanic_bp
from .service_ticket import service_ticket_bp
from .customer import customer_bp

def create_app(config_file="config.py"):
    app = Flask(__name__, instance_relative_config=True)
    app.config.from_pyfile(config_file)

    db.init_app(app)
    ma.init_app(app)

    with app.app_context():
        Base.metadata.create_all(bind=db.engine)

    # Register Blueprints
    app.register_blueprint(mechanic_bp, url_prefix="/mechanics")
    app.register_blueprint(customer_bp, url_prefix="/customers")
    app.register_blueprint(service_ticket_bp, url_prefix="/service-tickets")

    return app
-e \n--- FILE: ./app/extensions.py ---\n
from flask_sqlalchemy import SQLAlchemy
from flask_marshmallow import Marshmallow

db = SQLAlchemy()
ma = Marshmallow()
-e \n--- FILE: ./app/customer/__init__.py ---\n
from flask import Blueprint

customer_bp = Blueprint("customers", __name__)

from . import routes
-e \n--- FILE: ./app/customer/schemas.py ---\n
from app.extensions import ma
from app.models import Customer

class CustomerSchema(ma.SQLAlchemyAutoSchema):
    class Meta:
        model = Customer
        load_instance = True

customer_schema = CustomerSchema()
customers_schema = CustomerSchema(many=True)
-e \n--- FILE: ./app/customer/routes.py ---\n
from flask import request, jsonify
from app.extensions import db
from app.models import Customer
from . import customer_bp
from .schemas import customer_schema, customers_schema

# CREATE
@customer_bp.route("/", methods=["POST"])
def create_customer():
    data = request.json
    new_customer = customer_schema.load(data, session=db.session)
    db.session.add(new_customer)
    db.session.commit()
    return customer_schema.jsonify(new_customer), 201

# READ ALL
@customer_bp.route("/", methods=["GET"])
def get_customers():
    customers = db.session.query(Customer).all()
    return customers_schema.jsonify(customers), 200

# UPDATE
@customer_bp.route("/<int:id>", methods=["PUT"])
def update_customer(id):
    customer = Customer.query.get_or_404(id)
    data = request.json
    for key, value in data.items():
        setattr(customer, key, value)
    db.session.commit()
    return customer_schema.jsonify(customer), 200

# DELETE
@customer_bp.route("/<int:id>", methods=["DELETE"])
def delete_customer(id):
    customer = Customer.query.get_or_404(id)
    db.session.delete(customer)
    db.session.commit()
    return jsonify({"message": f"Customer {id} deleted"}), 200
-e \n--- FILE: ./instance/config.py ---\n
SQLALCHEMY_DATABASE_URI = "mysql+mysqlconnector://root:Bunuhat1rla@localhost/mechanic_shop_db"
SQLALCHEMY_TRACK_MODIFICATIONS = False
